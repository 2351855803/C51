C51 COMPILER V9.54   MATRIXKEY                                                             11/18/2022 19:50:40 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MATRIXKEY
OBJECT MODULE PLACED IN .\Objects\MatrixKey.obj
COMPILER INVOKED BY: E:\shudian2\5\C51\BIN\C51.EXE MatrixKey.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listi
                    -ngs\MatrixKey.lst) TABS(6) OBJECT(.\Objects\MatrixKey.obj)

line level    source

   1          
   2          #include <REGX52.H>
   3          #include "Delay.h"
   4          
   5          //矩阵键盘子函数
   6          //逻辑是首先全部拉高，然后按列置为零，如果哪两个引脚均为0，则就是按下
   7          
   8                      
   9          //               P1_3  P1_2  P1_1 P1_0
  10          //          P1_7
  11          
  12          //          P1_6
  13          
  14          //          P1_5
  15          
  16          //          P1_4
  17          
  18          //P1_3到P1_0分别置零
  19          
  20          //线反转法
  21          //低位全部拉为0
  22          
  23          unsigned char Matrix_key()
  24          {
  25   1      //    1111 0000
  26   1      //    1011 0000
  27   1      //    
  28   1      //    n=P1&0xf0;
  29   1      //    1011 0000
  30   1      //    
  31   1      //    P1=0x0f;
  32   1      //    0000 1111
  33   1      //    m=P1&0x0f;
  34   1            
  35   1            
  36   1            unsigned char n,m;
  37   1            P1=0xf0;
  38   1            
  39   1            //检测到有按键按下，高四位会有一个变成0
  40   1            if((P1&0xf0)!=0xf0);
  41   1            {
  42   2                  Delayms(10);
  43   2                        
  44   2                  if((P1&0xf0)!=0xf0);
  45   2                  {
  46   3                        //取高四位
  47   3                        n=P1&0xf0;
  48   3                        
  49   3                        P1=0x0f;
  50   3      
  51   3                        //取低四位
  52   3                        m=P1&0x0f;
  53   3                        
  54   3                        return(n+m);
C51 COMPILER V9.54   MATRIXKEY                                                             11/18/2022 19:50:40 PAGE 2   

  55   3                  }
  56   2            }
  57   1      
  58   1      //--------------------------------------------------------------------------------------
  59   1      
  60   1      //    while(1)
  61   1      //    {
  62   1      //          //先全部拉高
  63   1      //          P1 = 0xff;
  64   1      //          
  65   1      //          P1_3 = 0;
  66   1      //          switch(P1)
  67   1      //          {
  68   1      //                case 0x77: 
  69   1      //                      Delayms(10); while(0x77 == P1); Delayms(10); return 1; break;
  70   1      //                case 0xb7:
  71   1      //                      Delayms(10); while(0xb7 == P1); Delayms(10); return 5; break;
  72   1      //                case 0xd7:
  73   1      //                      Delayms(10); while(0xd7 == P1); Delayms(10); return 9; break;
  74   1      //                case 0xe7:
  75   1      //                      Delayms(10); while(0xe7 == P1); Delayms(10); return 13; break;
  76   1      //          }
  77   1      //          
  78   1      //          P1 = 0xff;
  79   1      //          P1_2 = 0;
  80   1      //          switch(P1)
  81   1      //          {
  82   1      //                case 0x7b: 
  83   1      //                      Delayms(10); while(0x7b == P1); Delayms(10); return 2; break;
  84   1      //                case 0xbb:
  85   1      //                      Delayms(10); while(0xbb == P1); Delayms(10); return 6; break;
  86   1      //                case 0xdb:
  87   1      //                      Delayms(10); while(0xdb == P1); Delayms(10); return 10; break;
  88   1      //                case 0xeb:
  89   1      //                      Delayms(10); while(0xeb == P1); Delayms(10); return 14; break;
  90   1      //          }
  91   1      
  92   1      //          P1 = 0xff;
  93   1      //          P1_1 = 0;
  94   1      //          switch(P1)
  95   1      //          {
  96   1      //                case 0x7d: 
  97   1      //                      Delayms(10); while(0x7d == P1); Delayms(10); return 3; break;
  98   1      //                case 0xbd:
  99   1      //                      Delayms(10); while(0xbd == P1); Delayms(10); return 7; break;
 100   1      //                case 0xdd:
 101   1      //                      Delayms(10); while(0xdd == P1); Delayms(10); return 11; break;
 102   1      //                case 0xed:
 103   1      //                      Delayms(10); while(0xed == P1); Delayms(10); return 15; break;
 104   1      //          }
 105   1      //          
 106   1      //          
 107   1      //          P1 = 0xff;
 108   1      //          P1_0 = 0;
 109   1      //          switch(P1)
 110   1      //          {
 111   1      //                case 0x7e: 
 112   1      //                      Delayms(10); while(0x7e == P1); Delayms(10); return 4; break;
 113   1      //                case 0xbe:
 114   1      //                      Delayms(10); while(0xbe == P1); Delayms(10); return 8; break;
 115   1      //                case 0xde:
 116   1      //                      Delayms(10); while(0xde == P1); Delayms(10); return 12; break;
C51 COMPILER V9.54   MATRIXKEY                                                             11/18/2022 19:50:40 PAGE 3   

 117   1      //                case 0xee:
 118   1      //                      Delayms(10); while(0xee == P1); Delayms(10); return 16; break;
 119   1      //          }
 120   1      //    }
 121   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     23    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
